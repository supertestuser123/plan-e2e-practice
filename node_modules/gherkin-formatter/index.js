"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.format = exports.config = void 0;
const gherkin_ast_1 = require("gherkin-ast");
const lines_builder_1 = require("lines-builder");
const debug_1 = require("./debug");
const gherkinDocumentFormatter_1 = require("./formatters/gherkinDocumentFormatter");
const debug = (0, debug_1.getDebugger)("index");
const DEFAULT_OPTIONS = {
    oneTagPerLine: false,
    separateStepGroups: false,
    compact: false,
    lineBreak: null,
    indentation: "  ",
    tagFormat: gherkin_ast_1.TagFormat.FUNCTIONAL,
};
const config = (options) => {
    var _a, _b, _c, _d, _e, _f;
    debug("config(options: %o)", options);
    options = options !== null && options !== void 0 ? options : {};
    return {
        oneTagPerLine: (_a = options.oneTagPerLine) !== null && _a !== void 0 ? _a : DEFAULT_OPTIONS.oneTagPerLine,
        separateStepGroups: (_b = options.separateStepGroups) !== null && _b !== void 0 ? _b : DEFAULT_OPTIONS.separateStepGroups,
        compact: (_c = options.compact) !== null && _c !== void 0 ? _c : DEFAULT_OPTIONS.compact,
        lineBreak: (_d = options.lineBreak) !== null && _d !== void 0 ? _d : DEFAULT_OPTIONS.lineBreak,
        indentation: (_e = options.indentation) !== null && _e !== void 0 ? _e : DEFAULT_OPTIONS.indentation,
        tagFormat: (_f = options.tagFormat) !== null && _f !== void 0 ? _f : DEFAULT_OPTIONS.tagFormat,
    };
};
exports.config = config;
const format = (document, options) => {
    debug("format(document: %s, options: %o)", document === null || document === void 0 ? void 0 : document.constructor.name, options);
    if (!document) {
        throw new Error("Document must be set!");
    }
    if (!(document instanceof gherkin_ast_1.Document)) {
        throw new TypeError(`The passed object is not a GherkinDocument! ${document}`);
    }
    options = (0, exports.config)(options);
    gherkin_ast_1.config.set({
        tagFormat: options.tagFormat,
    });
    (0, lines_builder_1.setDefaultOptions)({
        eol: options.lineBreak,
        indent: options.indentation,
        skipEmpty: options.compact,
        skipFirstLevelIndent: true,
        indentEmpty: false,
        trimLeft: false,
        trimRight: true,
    });
    return (0, gherkinDocumentFormatter_1.format)(document, options);
};
exports.format = format;
//# sourceMappingURL=index.js.map