"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackgroundProcessor = void 0;
const tslib_1 = require("tslib");
const Processor_1 = require("./Processor");
const StepProcessor_1 = require("./StepProcessor");
const debug_1 = require("./debug");
const debug = (0, debug_1.getDebugger)("BackgroundProcessor");
class BackgroundProcessor extends Processor_1.PartialProcessor {
    constructor(preCompiler) {
        debug("constructor(%o)", preCompiler);
        super(preCompiler);
        this.stepProcessor = new StepProcessor_1.StepProcessor(preCompiler);
    }
    preFilter(e, p) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /* istanbul ignore next */
            debug("preFilter(hasPreBackground: %s, e: %s, p: %s)", !!this.preCompiler.preBackground, e === null || e === void 0 ? void 0 : e.constructor.name, p === null || p === void 0 ? void 0 : p.constructor.name);
            return !this.preCompiler.preBackground || (yield this.preCompiler.preBackground(e, p));
        });
    }
    postFilter(e, p) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /* istanbul ignore next */
            debug("postFilter(hasPostBackground: %s, e: %s, p: %s)", !!this.preCompiler.postBackground, e === null || e === void 0 ? void 0 : e.constructor.name, p === null || p === void 0 ? void 0 : p.constructor.name);
            return !this.preCompiler.postBackground || (yield this.preCompiler.postBackground(e, p));
        });
    }
    process(e, p) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /* istanbul ignore next */
            debug("process(hasOnBackground: %s, e: %s, p: %s)", !!this.preCompiler.onBackground, e === null || e === void 0 ? void 0 : e.constructor.name, p === null || p === void 0 ? void 0 : p.constructor.name);
            let background = e;
            if (this.preCompiler.onBackground) {
                const result = yield this.preCompiler.onBackground(e, p);
                if (typeof result !== "undefined") {
                    background = result;
                }
            }
            if (background) {
                debug("...step %s", Array.isArray(background.steps));
                background.steps = yield this.stepProcessor.execute(background.steps, background);
            }
            return background;
        });
    }
}
exports.BackgroundProcessor = BackgroundProcessor;
//# sourceMappingURL=BackgroundProcessor.js.map