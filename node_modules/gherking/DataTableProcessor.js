"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataTableProcessor = void 0;
const tslib_1 = require("tslib");
const Processor_1 = require("./Processor");
const TableRowProcessor_1 = require("./TableRowProcessor");
const debug_1 = require("./debug");
const debug = (0, debug_1.getDebugger)("DataTableProcessor");
class DataTableProcessor extends Processor_1.Processor {
    constructor(preCompiler) {
        debug("constructor(%o)", preCompiler);
        super(preCompiler);
        this.tableRowProcessor = new TableRowProcessor_1.TableRowProcessor(preCompiler);
    }
    preFilter(e, p) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /* istanbul ignore next */
            debug("preFilter(hasPreDataTable: %s, e: %s, p: %s)", !!this.preCompiler.preDataTable, e === null || e === void 0 ? void 0 : e.constructor.name, p === null || p === void 0 ? void 0 : p.constructor.name);
            return !this.preCompiler.preDataTable || (yield this.preCompiler.preDataTable(e, p));
        });
    }
    postFilter(e, p) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /* istanbul ignore next */
            debug("postFilter(hasPostDataTable: %s, e: %s, p: %s)", !!this.preCompiler.postDataTable, e === null || e === void 0 ? void 0 : e.constructor.name, p === null || p === void 0 ? void 0 : p.constructor.name);
            return !this.preCompiler.postDataTable || (yield this.preCompiler.postDataTable(e, p));
        });
    }
    process(e, p) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /* istanbul ignore next */
            debug("process(hasOnDataTable: %s, e: %s, p: %s)", !!this.preCompiler.onDataTable, e === null || e === void 0 ? void 0 : e.constructor.name, p === null || p === void 0 ? void 0 : p.constructor.name);
            let dataTable = e;
            if (this.preCompiler.onDataTable) {
                const result = yield this.preCompiler.onDataTable(e, p);
                if (typeof result !== "undefined") {
                    dataTable = result;
                }
            }
            if (dataTable) {
                debug("...rows %s", Array.isArray(dataTable.rows));
                dataTable.rows = yield this.tableRowProcessor.execute(dataTable.rows, dataTable);
            }
            return dataTable;
        });
    }
}
exports.DataTableProcessor = DataTableProcessor;
//# sourceMappingURL=DataTableProcessor.js.map