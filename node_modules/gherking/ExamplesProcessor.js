"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExamplesProcessor = void 0;
const tslib_1 = require("tslib");
const Processor_1 = require("./Processor");
const TableRowProcessor_1 = require("./TableRowProcessor");
const TagProcessor_1 = require("./TagProcessor");
const debug_1 = require("./debug");
const debug = (0, debug_1.getDebugger)("ExamplesProcessor");
class ExamplesProcessor extends Processor_1.ListProcessor {
    constructor(preCompiler) {
        debug("constructor(%o)", preCompiler);
        super(preCompiler);
        this.tagsProcessor = new TagProcessor_1.TagProcessor(preCompiler);
        this.tableRowProcessor = new TableRowProcessor_1.TableRowProcessor(preCompiler);
    }
    preFilter(e, p, i) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /* istanbul ignore next */
            debug("preFilter(hasPreExamples: %s, e: %s, p: %s, i: %d)", !!this.preCompiler.preExamples, e === null || e === void 0 ? void 0 : e.constructor.name, p === null || p === void 0 ? void 0 : p.constructor.name, i);
            return !this.preCompiler.preExamples || (yield this.preCompiler.preExamples(e, p, i));
        });
    }
    postFilter(e, p, i) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /* istanbul ignore next */
            debug("postFilter(hasPostExamples: %s, e: %s, p: %s, i: %d)", !!this.preCompiler.postExamples, e === null || e === void 0 ? void 0 : e.constructor.name, p === null || p === void 0 ? void 0 : p.constructor.name, i);
            return !this.preCompiler.postExamples || (yield this.preCompiler.postExamples(e, p, i));
        });
    }
    process(e, p, i) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /* istanbul ignore next */
            debug("process(hasOnExamples: %s, e: %s, p: %s, i: %d)", !!this.preCompiler.onExamples, e === null || e === void 0 ? void 0 : e.constructor.name, p === null || p === void 0 ? void 0 : p.constructor.name, i);
            let examples = e;
            if (this.preCompiler.onExamples) {
                const result = yield this.preCompiler.onExamples(e, p, i);
                if (typeof result !== "undefined") {
                    examples = result;
                }
            }
            if (examples) {
                if (Array.isArray(examples)) {
                    debug("...Array: %d", examples.length);
                    examples = yield ExamplesProcessor.map(examples, this.postProcess.bind(this));
                }
                else {
                    debug("...replace");
                    examples = yield this.postProcess(examples);
                }
            }
            return examples;
        });
    }
    postProcess(e) {
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            debug("postProcess(tags: %s, body: %s)", Array.isArray(e.tags), Array.isArray(e.body));
            e.tags = yield this.tagsProcessor.execute(e.tags, e);
            e.header = (_a = (yield this.tableRowProcessor.execute([e.header], e))) === null || _a === void 0 ? void 0 : _a[0];
            e.body = yield this.tableRowProcessor.execute(e.body, e);
            return e;
        });
    }
}
exports.ExamplesProcessor = ExamplesProcessor;
//# sourceMappingURL=ExamplesProcessor.js.map