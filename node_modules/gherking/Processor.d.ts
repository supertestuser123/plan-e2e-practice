import { MultiControlType, PreCompiler, SingleControlType } from "./PreCompiler";
export declare abstract class ProcessorBase {
    protected preCompiler: Partial<PreCompiler>;
    constructor(preCompiler?: Partial<PreCompiler>);
    protected static filter<T>(items: T[], fn: (e: T, i: number) => Promise<boolean>): Promise<T[]>;
    protected static map<T, R = T>(items: T[], fn: (e: T, i: number) => Promise<R>): Promise<R[]>;
}
export declare abstract class PartialProcessor<T, P, R = T | null> extends ProcessorBase {
    protected abstract preFilter(e: T, p: P): Promise<boolean>;
    protected abstract postFilter(e: T, p: P): Promise<boolean>;
    protected abstract process(e: T, p: P): Promise<SingleControlType<R>>;
}
export declare abstract class Processor<T, P, R = T | null> extends PartialProcessor<T, P, R> {
    execute(e: T, p: P): Promise<R>;
}
export declare abstract class PartialListProcessor<T, P, R = T> extends ProcessorBase {
    protected abstract preFilter(e: T, p: P, i: number): Promise<boolean>;
    protected abstract postFilter(e: T, p: P, i: number): Promise<boolean>;
    protected abstract process(e: T, p: P, i: number): Promise<MultiControlType<R>>;
}
export declare abstract class ListProcessor<T, P> extends PartialListProcessor<T, P> {
    execute(items: T[], p: P): Promise<T[]>;
}
