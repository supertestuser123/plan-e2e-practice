"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListProcessor = exports.PartialListProcessor = exports.Processor = exports.PartialProcessor = exports.ProcessorBase = void 0;
const tslib_1 = require("tslib");
const debug_1 = require("./debug");
const processorDebug = (0, debug_1.getDebugger)("Processor");
const listProcessorDebug = (0, debug_1.getDebugger)("ListProcessor");
class ProcessorBase {
    constructor(preCompiler) {
        this.preCompiler = preCompiler || {};
    }
    static filter(items, fn) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const filtered = [];
            for (let i = 0; i < items.length; ++i) {
                try {
                    if (yield fn(items[i], i)) {
                        filtered.push(items[i]);
                    }
                }
                catch (e) {
                    // noop
                }
            }
            return filtered;
        });
    }
    static map(items, fn) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const mapped = [];
            for (let i = 0; i < items.length; ++i) {
                mapped.push(yield fn(items[i], i));
            }
            return mapped;
        });
    }
}
exports.ProcessorBase = ProcessorBase;
class PartialProcessor extends ProcessorBase {
}
exports.PartialProcessor = PartialProcessor;
class Processor extends PartialProcessor {
    execute(e, p) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /* istanbul ignore next */
            processorDebug("execute(e: %s, p: %s)", e === null || e === void 0 ? void 0 : e.constructor.name, p === null || p === void 0 ? void 0 : p.constructor.name);
            if (!e) {
                processorDebug("...!e");
                return null;
            }
            const preFilterResult = yield this.preFilter(e, p);
            if (!preFilterResult) {
                processorDebug("...!preFilterResult");
                return null;
            }
            let result = yield this.process(e, p);
            if (result === null) {
                processorDebug("...!result");
                return null;
            }
            if (Array.isArray(result)) {
                processorDebug("...!array");
                // @ts-ignore
                result = yield Processor.filter(result, r => this.postFilter(r, p));
                // @ts-ignore
                if (!result.length) {
                    processorDebug("...!postFilterResult");
                    return null;
                }
            }
            else {
                const postFilterResult = yield this.postFilter((result || e), p);
                if (!postFilterResult) {
                    processorDebug("...!postFilterResult");
                    return null;
                }
            }
            processorDebug("...result: %o", result || e);
            return (result || e);
        });
    }
}
exports.Processor = Processor;
class PartialListProcessor extends ProcessorBase {
}
exports.PartialListProcessor = PartialListProcessor;
class ListProcessor extends PartialListProcessor {
    execute(items, p) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /* istanbul ignore next */
            listProcessorDebug("execute(e: %s, p: %s)", items === null || items === void 0 ? void 0 : items.constructor.name, p === null || p === void 0 ? void 0 : p.constructor.name);
            if (!Array.isArray(items) || !items.length) {
                listProcessorDebug("...!Array");
                return [];
            }
            const preFiltered = yield ListProcessor.filter(items, (e, i) => this.preFilter(e, p, i));
            listProcessorDebug("...preFilter: %d -> %d", items.length, preFiltered.length);
            for (let i = 0; i < preFiltered.length; ++i) {
                listProcessorDebug("...processing #%d", i);
                const result = yield this.process(preFiltered[i], p, i);
                if (result === null) {
                    listProcessorDebug("......!result");
                    preFiltered.splice(i, 1);
                    i--;
                }
                else if (Array.isArray(result)) {
                    listProcessorDebug("......Array: %d", result.length);
                    preFiltered.splice(i, 1, ...result);
                    i += result.length - 1;
                }
                else if (result) {
                    listProcessorDebug("......replace: %o", result);
                    preFiltered[i] = result;
                }
                else {
                    listProcessorDebug("......noop");
                }
            }
            const postFiltered = yield ListProcessor.filter(preFiltered, (e, i) => this.postFilter(e, p, i));
            listProcessorDebug("...postFilter: %d -> %d", preFiltered.length, postFiltered.length);
            return postFiltered;
        });
    }
}
exports.ListProcessor = ListProcessor;
//# sourceMappingURL=Processor.js.map