"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScenarioProcessor = void 0;
const tslib_1 = require("tslib");
const Processor_1 = require("./Processor");
const StepProcessor_1 = require("./StepProcessor");
const TagProcessor_1 = require("./TagProcessor");
const debug_1 = require("./debug");
const debug = (0, debug_1.getDebugger)("ScenarioProcessor");
class ScenarioProcessor extends Processor_1.PartialListProcessor {
    constructor(preCompiler) {
        debug("constructor(%o)", preCompiler);
        super(preCompiler);
        this.stepProcessor = new StepProcessor_1.StepProcessor(preCompiler);
        this.tagProcessor = new TagProcessor_1.TagProcessor(preCompiler);
    }
    preFilter(e, p, i) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /* istanbul ignore next */
            debug("preFilter(hasPreScenario: %s, e: %s, p: %s, i: %d)", !!this.preCompiler.preScenario, e === null || e === void 0 ? void 0 : e.constructor.name, p === null || p === void 0 ? void 0 : p.constructor.name, i);
            return !this.preCompiler.preScenario || (yield this.preCompiler.preScenario(e, p, i));
        });
    }
    postFilter(e, p, i) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /* istanbul ignore next */
            debug("postFilter(hasPostScenario: %s, e: %s, p: %s, i: %d)", !!this.preCompiler.postScenario, e === null || e === void 0 ? void 0 : e.constructor.name, p === null || p === void 0 ? void 0 : p.constructor.name, i);
            return !this.preCompiler.postScenario || (yield this.preCompiler.postScenario(e, p, i));
        });
    }
    process(e, p, i) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /* istanbul ignore next */
            debug("process(hasOnScenario: %s, e: %s, p: %s, i: %d)", !!this.preCompiler.onScenario, e === null || e === void 0 ? void 0 : e.constructor.name, p === null || p === void 0 ? void 0 : p.constructor.name, i);
            let scenario = e;
            if (this.preCompiler.onScenario) {
                const result = yield this.preCompiler.onScenario(e, p, i);
                if (typeof result !== "undefined") {
                    scenario = result;
                }
            }
            if (scenario) {
                if (Array.isArray(scenario)) {
                    debug("...Array: %d", scenario.length);
                    scenario = yield ScenarioProcessor.map(scenario, this.postProcess.bind(this));
                }
                else {
                    debug("...replace");
                    scenario = yield this.postProcess(scenario);
                }
            }
            return scenario;
        });
    }
    postProcess(e) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            debug("postProcess(tags: %s, steps: %s)", Array.isArray(e.tags), Array.isArray(e.steps));
            e.tags = yield this.tagProcessor.execute(e.tags, e);
            e.steps = yield this.stepProcessor.execute(e.steps, e);
            return e;
        });
    }
}
exports.ScenarioProcessor = ScenarioProcessor;
//# sourceMappingURL=ScenarioProcessor.js.map