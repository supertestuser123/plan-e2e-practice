"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StepProcessor = void 0;
const tslib_1 = require("tslib");
const DataTableProcessor_1 = require("./DataTableProcessor");
const debug_1 = require("./debug");
const DocStringProcessor_1 = require("./DocStringProcessor");
const Processor_1 = require("./Processor");
const debug = (0, debug_1.getDebugger)("StepProcessor");
class StepProcessor extends Processor_1.ListProcessor {
    constructor(preCompiler) {
        debug("constructor(%o)", preCompiler);
        super(preCompiler);
        this.docStringProcessor = new DocStringProcessor_1.DocStringProcessor(preCompiler);
        this.dataTableProcessor = new DataTableProcessor_1.DataTableProcessor(preCompiler);
    }
    preFilter(e, p, i) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /* istanbul ignore next */
            debug("preFilter(hasPreStep: %s, e: %s, p: %s, i: %d)", !!this.preCompiler.preStep, e === null || e === void 0 ? void 0 : e.constructor.name, p === null || p === void 0 ? void 0 : p.constructor.name, i);
            return !this.preCompiler.preStep || (yield this.preCompiler.preStep(e, p, i));
        });
    }
    postFilter(e, p, i) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /* istanbul ignore next */
            debug("postFilter(hasPostStep: %s, e: %s, p: %s, i: %d)", !!this.preCompiler.postStep, e === null || e === void 0 ? void 0 : e.constructor.name, p === null || p === void 0 ? void 0 : p.constructor.name, i);
            return !this.preCompiler.postStep || (yield this.preCompiler.postStep(e, p, i));
        });
    }
    process(e, p, i) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /* istanbul ignore next */
            debug("process(hasOnStep: %s, e: %s, p: %s, i: %d)", !!this.preCompiler.onStep, e === null || e === void 0 ? void 0 : e.constructor.name, p === null || p === void 0 ? void 0 : p.constructor.name, i);
            let step = e;
            if (this.preCompiler.onStep) {
                const result = yield this.preCompiler.onStep(e, p, i);
                if (typeof result !== "undefined") {
                    step = result;
                }
            }
            if (step) {
                if (Array.isArray(step)) {
                    debug("...Array: %d", step.length);
                    step = yield StepProcessor.map(step, this.postProcess.bind(this));
                }
                else {
                    debug("...replace");
                    step = yield this.postProcess(step);
                }
            }
            return step;
        });
    }
    postProcess(e) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            debug("postProcess(docString: %s, dataTable: %s)", !!e.docString, !!e.dataTable);
            if (e.docString) {
                debug("...docString");
                e.docString = yield this.docStringProcessor.execute(e.docString, e);
            }
            if (e.dataTable) {
                debug("...dataTable");
                e.dataTable = yield this.dataTableProcessor.execute(e.dataTable, e);
            }
            return e;
        });
    }
}
exports.StepProcessor = StepProcessor;
//# sourceMappingURL=StepProcessor.js.map