"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectSet = void 0;
const deepEqual = require("deep-eql");
const ENTRIES = Symbol('entries');
/**
 * Extended implementation of Set, to support
 * objects and custom comparison logic.
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set}
 */
class ObjectSet extends Set {
    constructor(iterable) {
        super();
        this[ENTRIES] = [];
        if (iterable) {
            for (const item of iterable) {
                this.add(item);
            }
        }
    }
    equals(a, b) {
        return deepEqual(a, b);
    }
    has(needle) {
        for (const item of this[ENTRIES]) {
            if (this.equals(needle, item)) {
                return true;
            }
        }
        return false;
    }
    delete(item) {
        for (let i = 0; i < this.size; ++i) {
            if (this.equals(item, this[ENTRIES][i])) {
                this[ENTRIES].splice(i, 1);
                return true;
            }
        }
        return false;
    }
    add(item) {
        if (typeof item !== 'undefined' && !this.has(item)) {
            this[ENTRIES].push(item);
        }
        return this;
    }
    clear() {
        this[ENTRIES] = [];
    }
    [Symbol.iterator]() {
        return this[ENTRIES][Symbol.iterator]();
    }
    keys() {
        return this[Symbol.iterator]();
    }
    values() {
        return this[Symbol.iterator]();
    }
    *entries() {
        for (const e of this[ENTRIES]) {
            yield [e, e];
        }
    }
    get size() {
        return this[ENTRIES].length;
    }
    forEach(callbackfn, thisArg) {
        for (const e of this[ENTRIES]) {
            if (thisArg) {
                callbackfn.call(thisArg, e, e, this);
            }
            else {
                callbackfn(e, e, this);
            }
        }
    }
}
exports.ObjectSet = ObjectSet;
//# sourceMappingURL=object_set.js.map